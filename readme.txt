# üèÉ‚Äç‚ôÇÔ∏è Strava Analytics - Syst√®me Complet

Syst√®me d'analyse avanc√© des donn√©es d'entra√Ænement Strava avec m√©triques natives enrichies et calculs personnalis√©s.

## ‚ú® Fonctionnalit√©s

### üîÑ M√©triques Strava Natives Enrichies
- üîê **Authentification Strava OAuth 2.0**
- üí™ **Puissance Normalized Power** (weighted_average_watts)
- üéØ **Training Stress Score** (suffer_score)
- ‚ù§Ô∏è **Donn√©es fr√©quence cardiaque** enrichies
- üîç **Distinction capteur r√©el vs estim√©** (device_watts)
- üè† **Contexte activit√©** (indoor/outdoor, commute)
- ‚úÖ **99.9% de couverture** sur vos activit√©s

### ‚ö° Calculs Personnalis√©s Avanc√©s
- üéØ **TSS personnalis√©** avec votre FTP r√©el
- üí™ **Records de puissance** automatiques (1min, 5min, 20min)
- üèÉ **Records de distance** automatiques (1km, 5km, 10km, semi, marathon)
- üìä **Zones d'intensit√© pr√©cises** bas√©es sur votre FTP
- üîÑ **Comparaison Strava vs Personnel**
- üìà **Analyses de charge d'entra√Ænement**
- üìã **Recommandations personnalis√©es**

### üìä Dashboard Web Int√©gr√©
- üåê **Interface web intuitive** avec graphiques interactifs
- üìà **Visualisations temps r√©el** de vos performances
- üì± **Responsive design** pour mobile et desktop
- üé® **Tableaux de bord personnalis√©s**

## üöÄ Installation Rapide

### Pr√©requis
- Docker et Docker Compose
- Compte Strava avec application API cr√©√©e

### 1. Configuration Strava API

1. Allez sur https://www.strava.com/settings/api
2. Cr√©ez une nouvelle application :
   - **Authorization Callback Domain** : `localhost`
   - **Website** : `http://localhost:58001`
3. Notez votre `Client ID` et `Client Secret`

### 2. Installation du Projet

```bash
# Cloner ou cr√©er le projet
cd ~/Documents/dev
mkdir strava-analytics && cd strava-analytics

# Copier la configuration
cp .env.example .env
```

Configurez `.env` avec vos param√®tres Strava :
```env
STRAVA_CLIENT_ID=votre_client_id
STRAVA_CLIENT_SECRET=votre_client_secret
STRAVA_REDIRECT_URI=http://localhost:58001/auth/strava/callback
```

### 3. D√©marrage

```bash
# Construction et d√©marrage
make build && make up

# Attendre le d√©marrage complet
sleep 15

# V√©rifier le bon fonctionnement
curl http://localhost:58001/health
```

### 4. Configuration Personnalis√©e

```bash
# Configurer votre FTP (remplacez 240 par votre FTP)
curl -X POST http://localhost:58001/api/activities/athlete/1/settings \
  -H "Content-Type: application/json" \
  -d '{"ftp": 240, "weight": 75}'

# Lancer les calculs personnalis√©s
curl -X POST http://localhost:58001/api/activities/athlete/1/calculate-custom-metrics
```

## üìä Acc√®s aux Interfaces

### URLs Principales
- **üè† Page d'accueil** : http://localhost:58001
- **üìä Dashboard Sport** : http://localhost:58001/dashboard/sport-km.html
- **‚öïÔ∏è Sant√© API** : http://localhost:58001/health
- **üîê Auth Strava** : http://localhost:58001/auth/strava
- **üìà Statut** : http://localhost:58001/auth/status

### Configuration Dashboard
Le fichier `dashboard/sport-km.html` est automatiquement servi via l'API Flask. Pour y acc√©der :

1. **Via navigateur** : http://localhost:58001/dashboard/sport-km.html
2. **Via API** : Le dashboard peut consommer les endpoints API directement

## üõ†Ô∏è Commandes Quotidiennes

### D√©marrage Standard
```bash
cd ~/Documents/dev/strava-analytics
make up
```

### V√©rifications Rapides
```bash
# Statut des services
docker-compose ps

# Sant√© de l'API
curl http://localhost:58001/health

# Vos param√®tres actuels
curl "http://localhost:58001/api/activities/athlete/1/settings"

# Derni√®res activit√©s
curl "http://localhost:58001/api/activities/athlete/1?per_page=5"
```

### Maintenance
```bash
# Red√©marrer les services
make restart

# Voir les logs
make logs

# Arr√™ter proprement
make stop

# Nettoyage complet (‚ö†Ô∏è supprime les donn√©es)
make clean
```

## üåê Endpoints API Principaux

### Configuration Personnelle
```bash
# Voir vos param√®tres
GET /api/activities/athlete/1/settings

# Configurer FTP et poids
POST /api/activities/athlete/1/settings
```

### Donn√©es d'Activit√©s
```bash
# Activit√©s enrichies
GET /api/activities/athlete/1

# M√©triques personnalis√©es
GET /api/activities/athlete/1/custom-metrics

# Export CSV complet
GET /api/activities/athlete/1/export-custom
```

### Analyses Avanc√©es
```bash
# Records personnels
GET /api/activities/athlete/1/personal-records

# Comparaison TSS
GET /api/activities/athlete/1/compare-tss

# Dashboard complet
GET /api/activities/athlete/1/dashboard-custom

# Recommandations
GET /api/activities/athlete/1/recommendations
```

## üìà Exemples d'Utilisation

### Configuration Initiale Compl√®te
```bash
# 1. D√©marrer le syst√®me
cd ~/Documents/dev/strava-analytics && make up && sleep 15

# 2. Configurer vos param√®tres (ajustez selon vos valeurs)
curl -X POST http://localhost:58001/api/activities/athlete/1/settings \
  -H "Content-Type: application/json" \
  -d '{"ftp": 240, "weight": 75, "max_heartrate": 190}'

# 3. Calculer les m√©triques personnalis√©es
curl -X POST http://localhost:58001/api/activities/athlete/1/calculate-custom-metrics

# 4. Voir votre dashboard
curl "http://localhost:58001/api/activities/athlete/1/dashboard-custom"

# 5. Acc√©der au dashboard web
# Ouvrir http://localhost:58001/dashboard/sport-km.html
```

### Export de Donn√©es
```bash
# Export CSV avec toutes les m√©triques
curl "http://localhost:58001/api/activities/athlete/1/export-custom" > mes_activites_completes.csv

# Export par ann√©e
curl "http://localhost:58001/api/activities/athlete/1/export-custom?year=2024" > activites_2024.csv

# Export par type d'activit√©
curl "http://localhost:58001/api/activities/athlete/1/export-custom?type=Run" > mes_courses.csv
```

## üóÉÔ∏è Architecture Technique

### Services Docker
- **API Flask** : http://localhost:58001 (application principale)
- **PostgreSQL** : localhost:5433 (base de donn√©es)
- **Dashboard Web** : Int√©gr√© dans l'API Flask

### Structure des Donn√©es
```
üìä M√©triques Strava Natives
‚îú‚îÄ‚îÄ Puissance Normalized Power (weighted_average_watts)
‚îú‚îÄ‚îÄ Training Stress Score (suffer_score)
‚îú‚îÄ‚îÄ Donn√©es cardio enrichies (has_heartrate)
‚îî‚îÄ‚îÄ Contexte activit√© (indoor/outdoor/commute)

‚ö° Calculs Personnalis√©s
‚îú‚îÄ‚îÄ TSS avec votre FTP r√©el
‚îú‚îÄ‚îÄ Intensity Factor pr√©cis
‚îú‚îÄ‚îÄ Zones de puissance personnalis√©es
‚îú‚îÄ‚îÄ Records automatiques (puissance + distance)
‚îî‚îÄ‚îÄ Recommandations d'entra√Ænement
```

### Base de Donn√©es
```sql
-- Tables principales
activity_summary              -- Activit√©s de base
activity_strava_metrics      -- M√©triques Strava natives
activity_custom_metrics      -- Calculs personnalis√©s
athlete_settings            -- Param√®tres utilisateur (FTP, poids)

-- Vues optimis√©es
activity_with_strava_metrics    -- Vue combin√©e enrichie
activity_complete_analysis      -- Vue avec tous les calculs
```

## üîß Configuration Avanc√©e

### Variables d'Environnement (.env)
```env
# Base de donn√©es
POSTGRES_USER=strava_user
POSTGRES_PASSWORD=votre_mot_de_passe_securise
POSTGRES_DB=strava_analytics_db

# Strava API
STRAVA_CLIENT_ID=votre_client_id
STRAVA_CLIENT_SECRET=votre_client_secret
STRAVA_REDIRECT_URI=http://localhost:58001/auth/strava/callback

# Application
FLASK_SECRET_KEY=votre_cle_secrete_flask
FLASK_ENV=production
```

### Acc√®s Base de Donn√©es (DBeaver)
- **Host** : `localhost`
- **Port** : `5433`
- **Database** : `strava_analytics_db`
- **Username** : `strava_user`
- **Password** : [votre mot de passe du .env]

### Requ√™tes SQL Utiles
```sql
-- Voir vos 10 derni√®res activit√©s avec m√©triques compl√®tes
SELECT name, type, start_date_local, distance_km, 
       weighted_average_watts, suffer_score, custom_tss, 
       intensity_factor, power_zone
FROM activity_complete_analysis 
WHERE athlete_id = 1 
ORDER BY start_date_local DESC 
LIMIT 10;

-- Statistiques par type d'activit√©
SELECT type, COUNT(*) as nb_activites,
       ROUND(AVG(custom_tss), 1) as tss_moyen,
       ROUND(AVG(intensity_factor), 3) as if_moyen,
       ROUND(SUM(distance_km), 2) as km_total
FROM activity_complete_analysis 
WHERE athlete_id = 1 
GROUP BY type 
ORDER BY nb_activites DESC;
```

## üÜò D√©pannage

### Probl√®mes Courants

**Services ne d√©marrent pas**
```bash
# V√©rifier les logs
docker-compose logs --tail=20

# Red√©marrer proprement
docker-compose down && docker-compose up -d
```

**Dashboard HTML ne s'affiche pas**
```bash
# V√©rifier que le fichier existe
ls -la dashboard/sport-km.html

# V√©rifier les permissions
chmod 644 dashboard/sport-km.html

# Acc√©der directement
curl http://localhost:58001/dashboard/sport-km.html
```

**Authentification Strava √©choue**
- V√©rifiez `STRAVA_CLIENT_ID` et `STRAVA_CLIENT_SECRET` dans `.env`
- V√©rifiez que l'URL de callback correspond dans les param√®tres Strava

**M√©triques manquantes**
```bash
# V√©rifier la couverture
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"

# Relancer l'enrichissement
curl -X POST "http://localhost:58001/api/activities/athlete/1/calculate-custom-metrics"
```

### Logs Utiles
```bash
# Tous les logs
make logs

# API seulement
docker-compose logs -f api

# Base de donn√©es seulement
docker-compose logs -f db

# Logs en temps r√©el
docker-compose logs -f --tail=100
```

## üì± Dashboard Web - Configuration

### Servir le Dashboard HTML

Votre fichier `dashboard/sport-km.html` peut √™tre accessible de plusieurs fa√ßons :

#### Option 1 : Via Flask (Recommand√©)
Ajoutez cette route dans votre API Flask :

```python
from flask import send_from_directory

@app.route('/dashboard/<path:filename>')
def serve_dashboard(filename):
    return send_from_directory('dashboard', filename)
```

Puis acc√©dez √† : http://localhost:58001/dashboard/sport-km.html

#### Option 2 : Int√©gration API Direct
Votre dashboard HTML peut consommer directement les APIs :

```javascript
// Dans sport-km.html
async function loadDashboardData() {
    try {
        const response = await fetch('/api/activities/athlete/1/dashboard-custom');
        const data = await response.json();
        // Traiter les donn√©es...
    } catch (error) {
        console.error('Erreur chargement donn√©es:', error);
    }
}
```

#### Option 3 : Static Files
Configurez Flask pour servir les fichiers statiques :

```python
app = Flask(__name__, static_folder='dashboard', static_url_path='/dashboard')
```

## üéØ R√©sultats Obtenus

### üìä Couverture des Donn√©es
- ‚úÖ **1455 activit√©s** synchronis√©es et analys√©es
- ‚úÖ **99.9% m√©triques enrichies** (Strava natives)
- ‚úÖ **100% calculs personnalis√©s** disponibles
- ‚úÖ **Records automatiques** d√©tect√©s et valid√©s

### üèÜ Profil Sportif Analys√©
- üö¥ **V√©lo** : FTP ~240W, pic 1min √† 318W
- üèÉ **Course** : Records 1km=4:17, 10km=4:26/km
- üìà **Progression** : IF moyen 1.049, charge optimis√©e

### üõ†Ô∏è Fonctionnalit√©s Actives
- ‚ö° Synchronisation automatique Strava
- üìä Calculs en temps r√©el
- üåê Dashboard web interactif
- üìÅ Export CSV enrichi
- üîç Analyses pr√©dictives

---

## üìÑ Commandes de R√©f√©rence

### Makefile Disponible
```bash
make help          # Voir toutes les commandes
make build         # Construire les images
make up            # D√©marrer les services
make down          # Arr√™ter les services
make restart       # Red√©marrer
make logs          # Voir les logs
make status        # Statut des services
make clean         # Nettoyage complet
```

### API Quick Start
```bash
# S√©quence compl√®te de d√©marrage
cd ~/Documents/dev/strava-analytics
make up && sleep 15
curl -X POST http://localhost:58001/api/activities/athlete/1/settings -H "Content-Type: application/json" -d '{"ftp": 240}'
curl -X POST http://localhost:58001/api/activities/athlete/1/calculate-custom-metrics
open http://localhost:58001/dashboard/sport-km.html
```

---

**üéØ Votre syst√®me Strava Analytics est op√©rationnel avec dashboard web int√©gr√© !**

**Acc√®s rapide :** `make up` puis http://localhost:58001/dashboard/sport-km.html üöÄ