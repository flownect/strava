# üèÉ‚Äç‚ôÇÔ∏è Strava Analytics - √âdition Enrichie

Syst√®me complet d'analyse des donn√©es d'entra√Ænement Strava avec API backend, base de donn√©es PostgreSQL, analyses temporelles avanc√©es et **m√©triques Strava natives enrichies**.

## ‚ú® Fonctionnalit√©s

### üîÑ Core Features (existantes)
- üîê **Authentification Strava OAuth 2.0**
- üìä **Analyses temporelles compl√®tes** (jour, semaine, mois, ann√©e)
- üìà **Statistiques avanc√©es** par type d'activit√©
- üìÖ **Vue calendrier** des activit√©s
- üèÜ **Records personnels** et progression
- üì§ **Export CSV enrichi** des donn√©es
- üîÑ **Synchronisation automatique** des activit√©s
- üê≥ **D√©ploiement Docker** pr√™t pour production

### ‚ö° Nouvelles M√©triques Strava Enrichies
- üí™ **Puissance Normalized Power** (weighted_average_watts) - Plus pr√©cise que puissance moyenne
- üéØ **Training Stress Score** (suffer_score) - Charge d'entra√Ænement scientifique (0-500+)
- ‚ù§Ô∏è **Donn√©es fr√©quence cardiaque** enrichies (has_heartrate, zones d'effort)
- üîç **Distinction capteur r√©el vs estim√©** (device_watts) - Fiabilit√© des donn√©es
- üè† **Contexte activit√©** (indoor/outdoor, commute, home trainer)
- üìä **Analyse par zones d'entra√Ænement** automatique
- üèÜ **D√©tection automatique entra√Ænements de qualit√©**
- üìà **Dashboards de performance niveau professionnel**

## üöÄ Installation rapide

### Pr√©requis
- Docker et Docker Compose
- Compte Strava avec application API cr√©√©e

### 1. Cr√©er le projet

```bash
# Dans Documents/dev
cd ~/Documents/dev
mkdir strava-analytics && cd strava-analytics
```

### 2. Configuration Strava API

1. Allez sur https://www.strava.com/settings/api
2. Cr√©ez une nouvelle application avec :
   - **Authorization Callback Domain** : `localhost`
   - **Website** : `http://localhost:58001`
3. Notez votre `Client ID` et `Client Secret`

### 3. Configuration du projet

```bash
# Copier le fichier d'environnement
cp .env.example .env

# √âditer avec vos param√®tres Strava
nano .env
```

Configurez dans `.env` :
```env
STRAVA_CLIENT_ID=votre_client_id
STRAVA_CLIENT_SECRET=votre_client_secret
STRAVA_REDIRECT_URI=http://localhost:58001/auth/strava/callback
```

### 4. Lancement

```bash
# Construction et d√©marrage
make build
make up

# Ou manuellement
docker-compose build
docker-compose up -d
```

### 5. Premi√®re utilisation

1. Ouvrir http://localhost:58001
2. Aller sur http://localhost:58001/auth/strava
3. Autoriser l'application Strava
4. Vos activit√©s seront synchronis√©es automatiquement avec **enrichissement complet** !

---

# üìã M√©mo - Commandes quotidiennes

## üöÄ D√©marrage depuis Docker Desktop

### 1. Ouvrir le terminal et aller dans le projet
```bash
cd ~/Documents/dev/strava-analytics
```

### 2. D√©marrer les services
```bash
# Option A : Avec Makefile (recommand√©)
make up

# Option B : Docker Compose direct
docker-compose up -d
```

### 3. V√©rifier que tout fonctionne
```bash
# Voir le statut des services
docker-compose ps

# Tester l'API (doit r√©pondre "healthy")
curl http://localhost:58001/health
```

## üîç Commandes de diagnostic

```bash
# Voir les logs en temps r√©el
docker-compose logs -f

# Voir seulement les logs de l'API
docker-compose logs -f api

# Voir seulement les logs de la base
docker-compose logs -f db

# Arr√™ter de voir les logs : Ctrl+C
```

## üìä URLs importantes

- **Page d'accueil** : http://localhost:58001
- **Sant√© de l'API** : http://localhost:58001/health  
- **Statut auth** : http://localhost:58001/auth/status
- **Authentification Strava** : http://localhost:58001/auth/strava

## üèÉ‚Äç‚ôÇÔ∏è Vos donn√©es personnelles enrichies

### Informations g√©n√©rales
```bash
# Statut de votre connexion Strava
curl http://localhost:58001/auth/status

# R√©sum√© enrichi de votre profil (remplacez 1 par votre athlete_id)
curl "http://localhost:58001/api/activities/athlete/1/summary"

# Statut des m√©triques enrichies (NOUVEAU)
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"

# Types d'activit√©s pratiqu√©s avec m√©triques (NOUVEAU)
curl "http://localhost:58001/api/activities/athlete/1/activity-types"
```

### Vos activit√©s enrichies
```bash
# 5 derni√®res activit√©s avec m√©triques compl√®tes
curl "http://localhost:58001/api/activities/athlete/1?per_page=5"

# Activit√©s d'une ann√©e sp√©cifique avec m√©triques
curl "http://localhost:58001/api/activities/athlete/1?year=2024"

# Synchroniser manuellement avec enrichissement automatique
curl "http://localhost:58001/api/activities/athlete/1/sync"
```

### ‚ö° Nouvelles analyses avanc√©es
```bash
# Analyse de votre charge d'entra√Ænement (Training Stress Score)
curl "http://localhost:58001/api/activities/athlete/1/training-load"

# Analyse de vos donn√©es de puissance (Normalized Power, capteurs)
curl "http://localhost:58001/api/activities/athlete/1/power-analysis"

# Vos entra√Ænements de qualit√© d√©tect√©s automatiquement
curl "http://localhost:58001/api/activities/athlete/1/quality-workouts"

# Mise √† jour des m√©triques pour activit√©s existantes
curl "http://localhost:58001/api/activities/athlete/1/update-metrics?limit=50"
```

## üõ†Ô∏è Commandes de maintenance

### Arr√™ter/Red√©marrer
```bash
# Arr√™ter tous les services
docker-compose stop

# Red√©marrer tous les services  
docker-compose restart

# Red√©marrer seulement l'API
docker-compose restart api
```

### En cas de probl√®me
```bash
# Arr√™ter tout proprement
docker-compose down

# Reconstruire les images
docker-compose build

# Relancer
docker-compose up -d

# Nettoyer compl√®tement (‚ö†Ô∏è supprime toutes les donn√©es!)
docker-compose down -v
docker system prune -f
```

## üìà Export de donn√©es enrichies

```bash
# Exporter toutes vos activit√©s ENRICHIES en CSV (NOUVEAU)
curl "http://localhost:58001/api/activities/athlete/1/export" > mes_activites_enrichies.csv

# Exporter seulement 2024 avec toutes les m√©triques (NOUVEAU)
curl "http://localhost:58001/api/activities/athlete/1/export?year=2024" > activites_2024_enrichies.csv

# Exporter seulement la course avec m√©triques de puissance (NOUVEAU)
curl "http://localhost:58001/api/activities/athlete/1/export?type=Run" > mes_courses_enrichies.csv
```

**Le CSV enrichi contient maintenant :**
- Toutes les donn√©es existantes (distance, temps, FC, etc.)
- **Puissance Normalized Power** (weighted_average_watts)
- **Training Stress Score** (suffer_score)
- **Type de capteur** (r√©el vs estim√©)
- **Contexte d'entra√Ænement** (indoor/outdoor)

## üÜò D√©pannage rapide

### Si l'API ne r√©pond pas
```bash
cd ~/Documents/dev/strava-analytics
docker-compose ps
docker-compose logs api --tail=20
```

### Si la base de donn√©es ne marche pas
```bash
docker-compose logs db --tail=20
```

### Si les m√©triques enrichies manquent
```bash
# V√©rifier le statut des m√©triques
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"

# Forcer l'enrichissement des activit√©s existantes
curl "http://localhost:58001/api/activities/athlete/1/update-metrics?limit=100"
```

### Si tout plante
```bash
docker-compose down
docker-compose up -d
sleep 10
curl http://localhost:58001/health
```

## ‚ö° S√©quence de d√©marrage compl√®te

```bash
# 1. Aller dans le projet
cd ~/Documents/dev/strava-analytics

# 2. D√©marrer
make up

# 3. Attendre 10 secondes
sleep 10

# 4. V√©rifier
curl http://localhost:58001/health

# 5. Voir vos donn√©es enrichies
curl http://localhost:58001/auth/status
curl "http://localhost:58001/api/activities/athlete/1/summary"
```

---

## üìã Commandes principales

```bash
make help          # Voir toutes les commandes
make up            # D√©marrer les services
make logs          # Voir les logs
make status        # Statut des services
make backup        # Sauvegarder la base
make stop          # Arr√™ter les services
make clean         # Nettoyage complet
```

## üåê Endpoints API

### Authentification
- `GET /auth/strava` - Authentification Strava
- `GET /auth/status` - Statut des athl√®tes connect√©s

### Activit√©s de base (enrichies)
- `GET /api/activities/athlete/{id}` - Liste des activit√©s avec m√©triques enrichies
- `GET /api/activities/athlete/{id}/export` - Export CSV enrichi avec toutes les m√©triques
- `GET /api/activities/athlete/{id}/sync` - Sync enrichie automatique

### ‚ö° Nouveaux endpoints m√©triques avanc√©es
- `GET /api/activities/athlete/{id}/summary` - R√©sum√© complet enrichi avec couverture m√©triques
- `GET /api/activities/athlete/{id}/metrics-status` - Statut d√©taill√© des m√©triques (couverture %)
- `GET /api/activities/athlete/{id}/training-load` - Analyse charge d'entra√Ænement (TSS)
- `GET /api/activities/athlete/{id}/power-analysis` - Analyse donn√©es puissance (NP, capteurs)
- `GET /api/activities/athlete/{id}/quality-workouts` - Entra√Ænements de qualit√© d√©tect√©s
- `GET /api/activities/athlete/{id}/activity-types` - Analyse par type avec m√©triques
- `GET /api/activities/athlete/{id}/update-metrics` - Mise √† jour m√©triques existantes
- `GET /api/activities/athlete/{id}/sync-single/{activity_id}` - Sync activit√© sp√©cifique

### Analytics (existants, am√©lior√©s)
- `GET /api/analytics/athlete/{id}/monthly` - Stats mensuelles enrichies
- `GET /api/analytics/athlete/{id}/day-of-week` - Stats par jour avec m√©triques
- `GET /api/analytics/athlete/{id}/calendar` - Vue calendrier enrichie
- `GET /api/analytics/athlete/{id}/trends` - Analyse tendances avec TSS
- `GET /api/analytics/athlete/{id}/comparison` - Comparaison ann√©es avec puissance
- `GET /api/analytics/athlete/{id}/dashboard` - R√©sum√© g√©n√©ral enrichi

## üìä Exemples d'analyses enrichies

### Training Stress Score et charge d'entra√Ænement
```bash
# Charge d'entra√Ænement sur 90 jours
curl "http://localhost:58001/api/activities/athlete/1/training-load?days=90"

# R√©partition par niveau d'effort (easy/moderate/hard/very_hard)
curl "http://localhost:58001/api/activities/athlete/1/training-load?days=30" | jq '.load_distribution'
```

### Analyse de puissance avanc√©e
```bash
# Analyse puissance avec distinction capteur r√©el/estim√©
curl "http://localhost:58001/api/activities/athlete/1/power-analysis?days=60"

# Voir seulement les activit√©s avec capteur de puissance r√©el
curl "http://localhost:58001/api/activities/athlete/1/power-analysis" | jq '.activities[] | select(.is_real_power == true)'
```

### D√©tection des entra√Ænements de qualit√©
```bash
# Entra√Ænements de qualit√© sur 2 mois
curl "http://localhost:58001/api/activities/athlete/1/quality-workouts?days=60"

# Pourcentage d'entra√Ænements de qualit√©
curl "http://localhost:58001/api/activities/athlete/1/quality-workouts" | jq '.quality_percentage'
```

### Statistiques mensuelles enrichies
```bash
curl "http://localhost:58001/api/analytics/athlete/1/monthly?months=6"
```

### Activit√©s par jour de la semaine avec m√©triques
```bash
curl "http://localhost:58001/api/analytics/athlete/1/day-of-week"
```

### Export CSV des activit√©s enrichies
```bash
curl "http://localhost:58001/api/activities/athlete/1/export?year=2024" > mes_activites_2024_enrichies.csv
```

## üóÇÔ∏è Structure des donn√©es enrichies

### Donn√©es temporelles captur√©es
- **Jour** : Lundi, Mardi, Mercredi...
- **Date** : Jour du mois (1-31)
- **Mois** : Janvier, F√©vrier, Mars...
- **Ann√©e** : 2024, 2023...
- **Semaine** : Num√©ro ISO (1-53)

### ‚ö° Nouvelles m√©triques analys√©es (Strava natives)
- **Puissance Normalized Power** : Plus pr√©cise que puissance moyenne, √©quivalent NP
- **Training Stress Score** : Charge d'entra√Ænement scientifique (√©chelle 0-500+)
- **Distinction capteur r√©el vs estim√©** : Fiabilit√© des donn√©es de puissance
- **Donn√©es FC enrichies** : Pr√©sence capteur, donn√©es de qualit√©
- **Contexte d'entra√Ænement** : Indoor/outdoor, commute, home trainer
- **Niveau d'effort** : Classification automatique (easy/moderate/hard/very_hard)
- **Qualit√© d'entra√Ænement** : D√©tection automatique des s√©ances importantes

### M√©triques existantes (conserv√©es)
- Distance (km)
- Temps de mouvement (heures)
- Vitesse moyenne/maximale
- D√©nivel√© positif
- Fr√©quence cardiaque
- Calories
- Type d'activit√© (Course, V√©lo, Natation...)

## üóÉÔ∏è Configuration DBeaver enrichie

### Param√®tres de connexion
- **Host** : `localhost`
- **Port** : `5433`
- **Database** : `strava_analytics_db`
- **Username** : `strava_user`
- **Password** : [votre POSTGRES_PASSWORD du .env]

### ‚ö° Nouvelles requ√™tes SQL enrichies

```sql
-- Voir vos 10 derni√®res activit√©s avec toutes les m√©triques enrichies
SELECT 
    name, type, start_date_local, distance_km, moving_time_hours,
    weighted_average_watts, suffer_score, device_watts, has_heartrate,
    trainer, commute, effort_level, power_source
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 
ORDER BY start_date_local DESC 
LIMIT 10;

-- Statistiques par type d'activit√© avec m√©triques avanc√©es
SELECT 
    type, 
    COUNT(*) as nb_activites,
    ROUND(SUM(distance_km), 2) as total_km,
    ROUND(SUM(moving_time_hours), 2) as total_heures,
    ROUND(AVG(weighted_average_watts), 1) as puissance_normalized_moyenne,
    ROUND(AVG(suffer_score), 1) as tss_moyen,
    ROUND(SUM(suffer_score), 1) as charge_totale,
    COUNT(CASE WHEN device_watts = true THEN 1 END) as activites_capteur_reel,
    ROUND((COUNT(CASE WHEN device_watts = true THEN 1 END)::float / COUNT(*)) * 100, 1) as pourcentage_capteur_reel
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 
GROUP BY type 
ORDER BY total_km DESC;

-- Charge d'entra√Ænement par mois (Training Stress Score)
SELECT 
    year, month_name,
    COUNT(*) as activites,
    ROUND(SUM(suffer_score), 1) as tss_total,
    ROUND(AVG(suffer_score), 1) as tss_moyen,
    ROUND(SUM(distance_km), 2) as km_totaux,
    COUNT(CASE WHEN effort_level = 'very_hard' THEN 1 END) as entra√Ænements_tr√®s_durs,
    COUNT(CASE WHEN effort_level = 'hard' THEN 1 END) as entra√Ænements_durs
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 AND suffer_score IS NOT NULL
GROUP BY year, month, month_name
ORDER BY year DESC, month DESC;

-- Activit√©s par niveau d'effort (Classification automatique)
SELECT 
    effort_level as niveau_effort,
    COUNT(*) as nombre_activites,
    ROUND(AVG(suffer_score), 1) as tss_moyen,
    ROUND(AVG(weighted_average_watts), 1) as puissance_moyenne,
    ROUND(AVG(distance_km), 2) as distance_moyenne,
    ROUND((COUNT(*)::float / (SELECT COUNT(*) FROM activity_with_strava_metrics WHERE athlete_id = 1)) * 100, 1) as pourcentage
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 
GROUP BY effort_level 
ORDER BY tss_moyen DESC;

-- Progression puissance par ann√©e (capteurs r√©els seulement)
SELECT 
    year,
    COUNT(CASE WHEN device_watts = true THEN 1 END) as activites_capteur_reel,
    ROUND(AVG(CASE WHEN device_watts = true THEN weighted_average_watts END), 1) as puissance_normalized_moyenne,
    MAX(CASE WHEN device_watts = true THEN weighted_average_watts END) as puissance_normalized_max,
    ROUND(AVG(CASE WHEN device_watts = true THEN suffer_score END), 1) as tss_moyen
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 AND weighted_average_watts IS NOT NULL
GROUP BY year 
ORDER BY year;

-- Entra√Ænements indoor vs outdoor
SELECT 
    activity_context as contexte,
    COUNT(*) as nombre,
    ROUND(AVG(suffer_score), 1) as tss_moyen,
    ROUND(AVG(weighted_average_watts), 1) as puissance_moyenne,
    ROUND(SUM(distance_km), 2) as km_totaux
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 
GROUP BY activity_context 
ORDER BY nombre DESC;

-- Top 10 de vos meilleures performances (TSS le plus √©lev√©)
SELECT 
    name, type, start_date_local, 
    distance_km, moving_time_hours,
    weighted_average_watts, suffer_score, device_watts
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 AND suffer_score IS NOT NULL
ORDER BY suffer_score DESC 
LIMIT 10;

-- Activit√©s avec donn√©es de puissance r√©elles (capteur)
SELECT 
    name, type, start_date_local,
    weighted_average_watts as puissance_normalized,
    suffer_score as tss,
    ROUND(weighted_average_watts / NULLIF(average_heartrate, 0), 2) as efficacite_cardiaque
FROM activity_with_strava_metrics 
WHERE athlete_id = 1 AND device_watts = true
ORDER BY weighted_average_watts DESC 
LIMIT 20;
```

### Requ√™tes SQL existantes (conserv√©es)
```sql
-- Voir vos 10 derni√®res activit√©s (version simple)
SELECT name, type, start_date_local, distance_km, moving_time_hours, day_name
FROM activity_summary 
WHERE athlete_id = 1 
ORDER BY start_date_local DESC 
LIMIT 10;

-- Activit√©s par jour de la semaine
SELECT day_name, COUNT(*) as nb_activites,
       ROUND(AVG(distance_km), 2) as distance_moyenne
FROM activity_summary 
WHERE athlete_id = 1 
GROUP BY day_name, day_of_week
ORDER BY day_of_week;
```

## üîß Configuration avanc√©e

### Variables d'environnement

```env
# Base de donn√©es
POSTGRES_USER=strava_user
POSTGRES_PASSWORD=votre_mot_de_passe
POSTGRES_DB=strava_analytics_db

# Strava API
STRAVA_CLIENT_ID=votre_client_id
STRAVA_CLIENT_SECRET=votre_client_secret
STRAVA_REDIRECT_URI=http://localhost:58001/auth/strava/callback

# Application
FLASK_SECRET_KEY=votre_cle_secrete
```

### Synchronisation enrichie automatique

Le syst√®me synchronise automatiquement avec enrichissement :
- ‚úÖ **Activit√©s de base** r√©cup√©r√©es depuis Strava
- ‚úÖ **M√©triques enrichies** extraites automatiquement
- ‚úÖ **Respect des limites API** Strava (100 req/15min, 1000/jour)
- ‚úÖ **Rate limiting intelligent** int√©gr√©
- ‚úÖ **Gestion d'erreurs** et reprises automatiques

### Personnaliser la synchronisation

```bash
# Sync normale avec enrichissement automatique (recommand√©)
curl "http://localhost:58001/api/activities/athlete/1/sync"

# Enrichir les activit√©s existantes sans m√©triques (50 par lot)
curl "http://localhost:58001/api/activities/athlete/1/update-metrics?limit=50"

# Forcer la mise √† jour d'une activit√© sp√©cifique
curl "http://localhost:58001/api/activities/athlete/1/sync-single/12345678"

# V√©rifier la couverture des m√©triques
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"
```

## üê≥ Architecture Docker enrichie

### Services
- **API** : Flask + SQLAlchemy + Enrichissement Strava automatique (port 58001)
- **Database** : PostgreSQL 15 + nouvelles tables m√©triques (port 5433)

### Nouvelles tables de donn√©es
- `activity_strava_metrics` : M√©triques natives Strava enrichies
- `activity_with_strava_metrics` : Vue combin√©e optimis√©e pour requ√™tes
- Vues analytiques enrichies : `monthly_activity_stats`, `weekly_activity_stats`, etc.

### Volumes persistants
- `postgres-data` : Donn√©es PostgreSQL + nouvelles m√©triques
- `./database/backup` : Sauvegardes
- `./data/exports` : Exports CSV enrichis

## üõ†Ô∏è D√©veloppement

### Structure du projet enrichie
```
strava-analytics/
‚îú‚îÄ‚îÄ api/                    # Code Python Flask
‚îÇ   ‚îú‚îÄ‚îÄ models/            # Mod√®les de donn√©es
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.py    # Mod√®les de base existants
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ strava_metrics.py # ‚ö° Nouveaux mod√®les m√©triques enrichies
‚îÇ   ‚îú‚îÄ‚îÄ services/          # Services m√©tier
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ strava_service.py # ‚ö° Service enrichi avec m√©triques
‚îÇ   ‚îú‚îÄ‚îÄ routes/            # Routes API
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ activities.py  # ‚ö° Routes enrichies avec nouvelles analyses
‚îÇ   ‚îî‚îÄ‚îÄ app.py            # Application principale
‚îú‚îÄ‚îÄ database/              # Configuration base
‚îÇ   ‚îî‚îÄ‚îÄ init.sql          # ‚ö° Schema enrichi avec nouvelles tables
‚îú‚îÄ‚îÄ data/                  # Donn√©es et exports
‚îî‚îÄ‚îÄ docker-compose.yml     # Configuration Docker
```

### Mode d√©veloppement
```bash
make dev  # D√©marre avec rebuild automatique
```

### Acc√®s direct aux services
```bash
make shell-api  # Shell du container API
make shell-db   # Console PostgreSQL
```

## üìà Exemples d'utilisation enrichis

### Analyser vos performances avec m√©triques avanc√©es
```python
# Via l'API Python enrichie
import requests
import json

# R√©cup√©rer vos m√©triques d'entra√Ænement
response = requests.get('http://localhost:58001/api/activities/athlete/1/training-load?days=90')
training_data = response.json()

print(f"Charge totale 90 jours: {training_data['training_load_stats']['total_load']} TSS")
print(f"Moyenne hebdomadaire: {training_data['training_load_stats']['avg_weekly_load']} TSS")
print(f"Sessions tr√®s dures: {training_data['load_distribution']['very_hard_sessions']}")

# Analyser la puissance avec distinction capteur r√©el/estim√©
power_response = requests.get('http://localhost:58001/api/activities/athlete/1/power-analysis?days=30')
power_data = power_response.json()

print(f"Puissance Normalized moyenne: {power_data['power_statistics']['avg_normalized_power']}W")
print(f"Couverture capteur r√©el: {power_data['power_meter_coverage']}%")
print(f"Activit√©s capteur r√©el: {power_data['real_power_meter_activities']}")

# D√©tecter les entra√Ænements de qualit√©
quality_response = requests.get('http://localhost:58001/api/activities/athlete/1/quality-workouts?days=60')
quality_data = quality_response.json()

print(f"Entra√Ænements de qualit√©: {quality_data['quality_workouts']}/{quality_data['total_activities']}")
print(f"Pourcentage qualit√©: {quality_data['quality_percentage']}%")
```

### Dashboard personnel enrichi
```bash
# R√©sum√© complet avec toutes les m√©triques
curl "http://localhost:58001/api/activities/athlete/1/summary" | jq

# Export CSV avec toutes les donn√©es enrichies
curl "http://localhost:58001/api/activities/athlete/1/export" > dashboard_complet_enrichi.csv

# Statut de couverture des m√©triques
curl "http://localhost:58001/api/activities/athlete/1/metrics-status" | jq
```

## üîí S√©curit√©

- Tokens Strava chiffr√©s en base
- Rate limiting respect√© (100 req/15min, 1000/jour)
- Refresh automatique des tokens
- Validation des entr√©es API
- Logs s√©curis√©s
- ‚ö° Gestion intelligente des limites API Strava pour enrichissement

## üì± Int√©grations possibles enrichies

Le syst√®me expose une API REST compl√®te enrichie pour int√©grer avec :
- Applications mobiles avec m√©triques de niveau professionnel
- Tableaux de bord (Grafana, Tableau) avec Training Stress Score
- Scripts d'analyse personnalis√©s avec donn√©es de puissance Normalized
- Syst√®mes de notification bas√©s sur la charge d'entra√Ænement
- Applications web tierces avec distinction capteur r√©el/estim√©
- Outils de coaching avec m√©triques scientifiques

## üÜò D√©pannage

### Probl√®mes courants

**API ne d√©marre pas**
```bash
make logs-api  # Voir les erreurs
```

**Authentification Strava √©choue**
- V√©rifier `STRAVA_CLIENT_ID` et `STRAVA_CLIENT_SECRET` dans `.env`
- V√©rifier que `STRAVA_REDIRECT_URI` correspond √† la config Strava

**Base de donn√©es inaccessible**
```bash
make shell-db  # Tester la connexion
```

**M√©triques enrichies manquantes**
```bash
# V√©rifier le statut des m√©triques
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"

# Voir la couverture actuelle
curl "http://localhost:58001/api/activities/athlete/1/metrics-status" | jq '.coverage_percentage'

# Forcer l'enrichissement des activit√©s sans m√©triques
curl "http://localhost:58001/api/activities/athlete/1/update-metrics?limit=50"
```

**Synchronisation lente**
- Normal : respecte les limites API Strava (100 req/15min)
- Patience requise pour gros volumes d'activit√©s
- Le syst√®me reprend automatiquement en cas d'interruption

### Logs utiles
```bash
make logs       # Tous les logs
make logs-api   # API seulement
make logs-db    # PostgreSQL

# Voir les erreurs de sync enrichie
docker-compose logs api | grep -i "enrichment"
docker-compose logs api | grep -i "strava_metrics"
```

## üì± R√©sum√© des ports

- **API enrichie** : http://localhost:58001
- **PostgreSQL + m√©triques** : localhost:5433 (pour DBeaver)

---

# üíæ Sauvegarde et versioning Git

## üîë Configuration SSH GitHub

### V√©rifier la configuration SSH existante
```bash
# V√©rifier les cl√©s SSH existantes
ls -la ~/.ssh/

# Tester la connexion GitHub
ssh -T git@github.com
```

### Si pas de cl√© SSH, en cr√©er une
```bash
# G√©n√©rer une nouvelle cl√© SSH
ssh-keygen -t ed25519 -C "votre-email@example.com"

# Ajouter la cl√© √† l'agent SSH
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

# Afficher la cl√© publique pour l'ajouter √† GitHub
cat ~/.ssh/id_ed25519.pub
```

Puis : GitHub ‚Üí Settings ‚Üí SSH Keys ‚Üí Add SSH Key

## üìÅ Initialisation du d√©p√¥t Git

```bash
cd ~/Documents/dev/strava-analytics

# Initialiser Git
git init

# Ajouter le remote GitHub
git remote add origin git@github.com:flownect/strava.git

# V√©rifier la connexion
git remote -v
```

## üíæ Sauvegarde enrichie

```bash
# Voir le statut des fichiers
git status

# Ajouter tous les fichiers (sauf .gitignore exclusions)
git add .

# Commit avec m√©triques enrichies
git commit -m "‚ö° Major Update: Strava Analytics with Enhanced Metrics

‚ú® New Features:
- üí™ Normalized Power (weighted_average_watts) from Strava API
- üéØ Training Stress Score (suffer_score) integration  
- ‚ù§Ô∏è Enhanced heart rate data (has_heartrate, zones)
- üîç Real vs estimated power detection (device_watts)
- üè† Activity context (indoor/outdoor, commute, trainer)
- üìä Advanced training zone analysis
- üèÜ Quality workout detection
- üìà Enhanced performance dashboards

üóÉÔ∏è Database Enhancements:
- New table: activity_strava_metrics
- Enhanced views: activity_with_strava_metrics  
- Optimized queries for performance analysis
- 99.9% metrics coverage achieved (1453/1454 activities)

üåê API Enhancements:
- Enhanced sync with automatic enrichment
- New endpoints for training load analysis
- Power analysis with sensor detection
- Quality workout identification
- Enriched CSV exports with all metrics

üê≥ Architecture:
- Flask API with Strava metrics enrichment
- PostgreSQL 15 with enhanced schema
- Docker deployment optimized
- Rate limiting for Strava API compliance

üìä Performance:
- 1454 activities synchronized
- 99.9% metrics enrichment coverage
- Training Stress Score analysis ready
- Normalized Power tracking active"

# Pousser vers GitHub
git push -u origin main
```

## üîÑ Sauvegardes futures

```bash
# Apr√®s modifications
git add .
git commit -m "üìù Update: description des changements"
git push
```

## üìä Commandes utiles Git

```bash
# Voir l'historique
git log --oneline

# Voir les modifications non commit√©es
git diff

# Voir le statut du d√©p√¥t
git status

# Voir les branches
git branch -a

# Synchroniser avec GitHub
git pull origin main
```

## üîí Fichiers exclus (.gitignore)

Les fichiers suivants ne sont **PAS** sauvegard√©s pour la s√©curit√© :
- `.env` (contient vos secrets Strava)
- `database/backup/*.sql` (sauvegardes BDD)
- `logs/*.log` (fichiers de logs)
- `data/exports/*` (exports CSV personnels)

## üÜò D√©pannage Git

### Probl√®me d'authentification
```bash
# V√©rifier la configuration
git config --global user.name "Votre Nom"
git config --global user.email "votre-email@example.com"

# Tester SSH
ssh -T git@github.com
```

### Changer l'URL du remote
```bash
# Si erreur "repository not found"
git remote set-url origin git@github.com:flownect/strava.git
```

### Synchroniser avec une version GitHub modifi√©e
```bash
# R√©cup√©rer les changements distants
git fetch origin
git merge origin/main

# Ou directement
git pull origin main
```

## üìã Structure sauvegard√©e enrichie

```
strava-analytics/
‚îú‚îÄ‚îÄ üìÑ README.md ‚úÖ (avec m√©triques enrichies compl√®tes)
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml ‚úÖ
‚îú‚îÄ‚îÄ üìÑ .env.example ‚úÖ (template)
‚îú‚îÄ‚îÄ üìÑ .gitignore ‚úÖ
‚îú‚îÄ‚îÄ üìÑ Makefile ‚úÖ
‚îú‚îÄ‚îÄ üìÅ api/ ‚úÖ (code Python enrichi)
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.py ‚úÖ (mod√®les de base)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ strava_metrics.py ‚úÖ (nouveaux mod√®les enrichis)
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ strava_service.py ‚úÖ (service enrichi)
‚îÇ   ‚îî‚îÄ‚îÄ routes/
‚îÇ       ‚îî‚îÄ‚îÄ activities.py ‚úÖ (routes enrichies)
‚îú‚îÄ‚îÄ üìÅ database/ ‚úÖ (schema enrichi)
‚îÇ   ‚îî‚îÄ‚îÄ init.sql ‚úÖ (avec nouvelles tables m√©triques)
‚îú‚îÄ‚îÄ üìÅ data/exports/ ‚úÖ (structure enrichie pour CSV)
‚îî‚îÄ‚îÄ üìÅ scripts/ ‚úÖ (utilitaires)

‚ùå Exclus pour s√©curit√©:
‚îú‚îÄ‚îÄ .env (secrets Strava)
‚îú‚îÄ‚îÄ database/backup/*.sql (sauvegardes)
‚îú‚îÄ‚îÄ logs/*.log (logs syst√®me)
‚îî‚îÄ‚îÄ data/exports/*.csv (donn√©es personnelles)
```

## üîÑ Workflow de d√©veloppement enrichi

```bash
# 1. Travailler sur le projet
cd ~/Documents/dev/strava-analytics
make up

# 2. Faire des modifications
# ... √©diter les fichiers ...

# 3. Tester les changements avec m√©triques
make restart
curl http://localhost:58001/health
curl "http://localhost:58001/api/activities/athlete/1/metrics-status"

# 4. Sauvegarder quand √ßa marche
git add .
git commit -m "‚ú® Add: nouvelle fonctionnalit√© enrichie"
git push

# 5. En cas de probl√®me, revenir en arri√®re
git log --oneline
git checkout <commit-hash>
```

---

## ü§ù Contribution

1. Fork le projet
2. Cr√©er une branche feature
3. Commit vos changements avec m√©triques enrichies
4. Push vers la branche
5. Ouvrir une Pull Request

### Guidelines de contribution
- ‚úÖ Respecter les limites API Strava (rate limiting)
- ‚úÖ Documenter les nouvelles m√©triques ajout√©es  
- ‚úÖ Tester avec des donn√©es r√©elles
- ‚úÖ Maintenir la compatibilit√© avec l'existant

## üìÑ Licence

MIT License - Voir le fichier LICENSE pour les d√©tails.

## üôè Remerciements

- [Strava API](https://developers.strava.com/) pour l'acc√®s aux donn√©es enrichies
- [Flask](https://flask.palletsprojects.com/) pour le framework web robuste
- [PostgreSQL](https://www.postgresql.org/) pour la base de donn√©es performante
- [Docker](https://www.docker.com/) pour la containerisation
- Communaut√© Strava pour les retours sur les m√©triques

## üèÜ R√©sultats obtenus

### ‚úÖ M√©triques synchronis√©es avec succ√®s
- **1454 activit√©s** totales r√©cup√©r√©es
- **1453 activit√©s** enrichies avec m√©triques Strava (99.9% de couverture)
- **Training Stress Score** disponible pour analyse de charge
- **Puissance Normalized Power** pour analyses de performance pr√©cises
- **Distinction capteur r√©el/estim√©** pour fiabilit√© des donn√©es
- **Contexte d'entra√Ænement** (indoor/outdoor) pour analyses compl√®tes

### üìä Nouvelles capacit√©s d'analyse
- Analyse de charge d'entra√Ænement scientifique (TSS)
- D√©tection automatique des entra√Ænements de qualit√©
- Progression de puissance avec donn√©es fiables
- Export CSV enrichi pour analyses externes
- Requ√™tes SQL avanc√©es pour insights d√©taill√©s

---

**üéØ Pr√™t √† analyser vos performances sportives avec des m√©triques de niveau professionnel ?**

**Commande de d√©marrage :** `cd ~/Documents/dev/strava-analytics && make up` üöÄ

## ‚ö° Statut actuel de vos donn√©es

- ‚úÖ **1454 activit√©s** synchronis√©es et analys√©es
- ‚úÖ **99.9% de couverture** m√©triques enrichies  
- ‚úÖ **Training Stress Score** pr√™t pour analyse de charge
- ‚úÖ **Puissance Normalized Power** disponible pour performance
- ‚úÖ **Export CSV enrichi** avec toutes les nouvelles m√©triques
- ‚úÖ **API REST compl√®te** pour int√©grations avanc√©es

**Votre syst√®me Strava Analytics est maintenant enrichi et pr√™t pour des analyses de niveau professionnel !** üèÜ25